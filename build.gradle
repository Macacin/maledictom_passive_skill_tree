plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7-+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = mod_version
group = mod_group_id

base {
    archivesName = "${mod_file_name}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')

            arg "-mixin.config=${mod_id}.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            arg "-mixin.config=${mod_id}.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }


        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            arg "-mixin.config=${mod_id}.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // mixin
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.2"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.2")) {
        jarJar.ranged(it, "[0.3.2,)")
    }
    // curios
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:5.3.1+1.20.1")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:5.3.1+1.20.1")
    // attribute fix
    implementation fg.deobf("curse.maven:attributefix-280510:4648448")
    // max health fix
    implementation fg.deobf("curse.maven:max-health-fix-492246:4648479")
    // dummy target
    implementation fg.deobf("curse.maven:mmmmmmmmmmmm-225738:4602101")
    implementation fg.deobf("curse.maven:selene-499980:4656567")
    // easy magic
    implementation fg.deobf("curse.maven:easy-magic-456239:4658750")
    implementation fg.deobf("curse.maven:puzzles-lib-495476:4673053")
    // farmer's delight
    implementation fg.deobf("curse.maven:farmers-delight-398521:4679319")
    // jei
    implementation fg.deobf("curse.maven:jei-238222:4644453")
    // apple skin
    implementation fg.deobf("curse.maven:appleskin-248787:4605078")
    // dave's potioneering
    implementation fg.deobf("curse.maven:daves-potioneering-639653:4770409")
    implementation fg.deobf("curse.maven:geckolib-388172:4933987")
    // item production lib
    implementation fg.deobf("curse.maven:item-production-lib-950401:5097458")
    // ftb
    implementation fg.deobf("curse.maven:placebo-283644:6274231")
    implementation fg.deobf("curse.maven:architectury-api-419699:5137938")
    implementation fg.deobf("curse.maven:ftb-teams-forge-404468:5267190")
    implementation fg.deobf("curse.maven:ftb-library-forge-404465:6807424")
    implementation fg.deobf("curse.maven:ftb-quests-forge-289412:6829212")
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version       : forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors         : mod_authors, mod_description: mod_description
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_id}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
// Custom task для deobf dev JAR (аналогично FTB)
jar {
    enabled = false  // Отключаем стандартный jar (sources only)
}

shadowJar {
    enabled = true
    archiveClassifier = 'dev-shadow'  // Имя: skilltree-1.0.0-dev-shadow.jar
    destinationDirectory = file("$buildDir/libs")

    // Deobf: Используй Forge mappings
    configurations = [project.configurations.shadow]

    // Включай только mod код (исключай MC/Forge)
    from sourceSets.main.output
    exclude 'META-INF/**'  // Исключай манифесты

    // Relocate, если нужно (для конфликтов, optional)
    // relocate 'dev.ftb.mods.ftbquests', 'shadow.dev.ftb.mods.ftbquests'

    // Manifest для Forge mod
    manifest {
        attributes 'Main-Class': 'net.minecraftforge.fml.loading.FMLClientLaunchHandler'  // Не нужно, Forge сам
    }

    // Minimize JAR (опционально, для размера)
    minimize()
}

// Task для sources JAR (стандартный)
task shadowSourcesJar(type: Jar, dependsOn: classes) {
    enabled = true
    archiveClassifier = 'sources'
    from sourceSets.main.java
}